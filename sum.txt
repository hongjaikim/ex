git 환경 설정

git으로 작성하는 모든 문서에 아래의 내용 추가됨
$ git config --global user.name "hongjai"
$ git config --global user.email "hongjai9811@gmail.com"

리눅스 명령어
$ mkdir 디렉토리명: 디렉토리 생성
$ rm -r 디렉토리명: 디렉토리와 디렉토리내의 모든 파일 삭제

$ pwd : 현재 디렉토리정보 확인
$ ls : 현재 디렉토리의 디렉토리명과 파일명 확인
$ ls -l : long format 형식으로 모든 정보 확인
$ ls -a : 히든파일도 확인 - . 으로 시작하는 파일명 보임
$ ls -la 가능

-->디렉토리 이동
$ cd 디렉토리명 : 하위 디렉토리로 이동
$ cd .. : 상위 디렉토리로 이동
$ cd . : 현재 디렉토리
$ cd c:/users/ ~~ : 절대이동
$ cd ~ : home 디렉토리

-> 상대경로 연습
-> 상위 디렉토리의 사용자명 아래의 git-dir로 이동
$ cd ../hpe/git-dir
$ pwd

./ 현재 디렉토리
../ 상위 디렉토리
~ 홈 디렉토리

--문서편집
$ vi  : 편집모드
i : insert 끼워넣기모드 앞
a :  끼워넣기
esc : 명령모드 복귀
:wq : 문서저장 편집기나감
:w 파일명 : 새로운 이름으로 저장
:q : 편집기 빠져나가기
:q! : 저장 안하고 편집기 종료
dd : 커서가 있는 라인 삭제
x : 한 글자 삭제
cw : 단어 수정 esc수정종료
r : 한글자 수정
dd : 라인지우기
시프트d : 라인 끝까지 지우기
u : 복구
r : 한글자수정

$ cat 파일명 : 화면에 파일내용 출력
$ cat > 파일명 : 키보드에서 입력한 내용 파일에 저장 ctrl+c 종료

git
초기화
$ git init
$ git add 파일명 : 스테이지에 파일 저장
$ git commit -m '메시지' : 스테이지에 있는 파일을 레퍼지토리에 옮김
$ git commit -am '메시지' : 수정된 파일을 레퍼지토리에 바로저장


git 상태확인
$ git status

git commit 확인
$ git log

저장소와 수정된 파일의 다른부분 보여주기
$ git diff

$ git log --stat 자세한 로그
양 너무 많을 때 f다음페이지 b이전페이지 q빠져나감

마지막  commit 메시지 수정
$ git commit --amend : 편집창 생성 

스테이지에 올라가지 않은 수정된 파일 되돌리기
$ git restore 파일명
$ git checkout -- 파일명

잘못만든 init 
$ rm -rf .git

스테이지의 파일을 내림
$ git add hello2.txt
$ git restore --staged 파일명

마지막 로그 파일로 복구
$ git reset HEAD^

$ git reset --hard 해시키 : 특정 위치의 파일로 복구
$ git revert 해시키 : 이후 남기고 복구

git 디렉토리를 생성하면서 초기화
$ git init 디렉토리명manual
= 	$ mkdir manual
	$ cd manual
	$ git init
$ cd manual
$ (main)
1단계
$ vi work.txt
$ git commit -m 'work1'

2단계
$ vi work.txt
	content2 내용추가
$ git commit -am 'work2'

3단계
$ vi work.txt
content3내용추가
$git commit -am 'work3'
$git branch : 작업하고 있는 브랜치명
$ git branch apple :apple 브랜치 생성
$ git log : 현재 HEAD가 가리키고 있는 브랜치명 보임

$ git branch goole
$ git branch ms

$ git log --online --branches --graph

$ git log 브랜치명..브랜치명 : 1번에 없고 2번에만 있는 정보 출력

$ git checkout 브랜치명 : 해당브랜치로 이동

$ git merge 브랜치명 : 현재 브랜치에 브랜치 병합

$ git merge 브랜치명 --edit : 메시지수정

$ git branch -d 브랜치명 : 브랜치 삭제

reset으로 다른 브랜치로 이동가능 : 이 경우 현재 브랜치 사라짐
실험

$ git stash : 숨기기
$ git stash pop: 되돌리기
$ git stash list: 확인

서버에 올리기
$ git remote add 서버명(설정) 서버주소 : 서버주소대신 서버명 사용
$ git push -u(처음만) 서버명 브랜치명
$ git pull 서버명 브랜치명 : 덮어쓰기

$ git remote -v : 리스트확인
$ git remote remove 서버명 : 목록에서 지우기

$git remote rename 서버명1 서버명2 : 서버명1을 서버명2로 변경

ssh로 접속
$ ssh-keygen 실행 : 홈디렉토리

$ cd .ssh
$ cat id_rsa.pub 실행후 복사

서버 settings ssh키등록

서버에 repository 생성
local의 자료를 push
서버 자료를 한꺼번에 복제 : $ git clone ip 새폴더명

$ git push : clone으로 가져온 경우 바로가능

$ git fetch : 변화한 것만 가져옴





















