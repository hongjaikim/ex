# numpy : 배열을 처리하기 쉽게 제공하는 모듈

arr = np.arange(15)    #np.arange(start,stop,step)
# 차원 변경 : array.reshape(행, 열)

print(arr.ndim)       # 차원 출력
print(arr.shape)      # 배열의 형태 3, 5
print(arr.size)       # 배열의 전체 데이터 개수
print(arr.dtype.name, arr.dtype.itemsize)   # 데이터 타입의 이름, 저장 사이즈

arr.reshape(arr.size) # 평탄화
# 리스트를 array로 변경 : np.array(리스트)

a = np.zeros((2,3),dtype='i')   # 데이터 타입을 int로

a = np.zeros((2,3),dtype='U4')   # 데이터 타입을 문자로

a = np.zeros((2,3),dtype='f')   # 데이터 타입을 float로

a = np.zeros((2,3),dtype='i8')   # 데이터 타입을 문자로

# 데이터 초기값을 1로 주면서 배열 생성
a = np.ones((2,3))

# array basic 연산
print(x1+y1)
print(x2*y2)
print(y2 /z1)

# array broadcast 연산
print(z1 +z2)
print(x1 ** 2)
print(x1 >= 2)

# shape 
# x2 = np.array([[1.0, 2.0],[ 3.0, 4.0]])
x2.reshape(x2.size)
x2.flatten()    # 1차원으로 평탄화

# 배열의 각 원소 추출 검색 : array[행,열]

# np.ndarray(shape, buffer=)   buffer는 데이터
# default float 타입과 int 타입의 데이터 할당량 차이 8,4 byte

a = np.array([[0.1,0.8,0.2,0.5],[0.3,0.2,0.5,0.6],[0.9,0.5,0.3,0.4]])
print(np.argmax(a,axis=0))    # axis=0 : 괄호끼리 비교하여 큰값
print(np.argmax(a,axis=1))    # axis=1 : 괄호내부에서 비교하여 큰값

# 난수 생성
# rand : 0부터 1사이의 균일분포(정규분포)로 난수 생성
# randn : 기댓값이 0이고 표준편차가 1인 가우시안 표준 정규분포를 따르는 난수 생성
# randint : 균일 분포의 정수 난수

# np.random.seed(10)  # 난수 고정

# 자료를 위치를 바꿈
np.random.shuffle(x)

# 샘플링 함수: choice 함수
# np.random.choice(data 또는 정수,size=None,replace=True,p=None)
# raplace = 중복숫자 허용



